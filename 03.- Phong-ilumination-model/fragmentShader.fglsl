#version 120

varying vec3 normal_vector; 
varying vec3 camera_vertex; 
varying vec4 ambient_color; 

uniform sampler2D sampler2d;

          
void main (void) 
{ 
    vec3 N = normalize ( normal_vector);               // Vector normal en el punto
    vec3 C = normalize (-camera_vertex);               // Vector hacia la cámara
 

    vec3 L = normalize (gl_LightSource[0].position.xyz - camera_vertex);   // Vector hacia la fuente de luz
    vec3 R = reflect (-L, N);                                              // Vector reflejado de la luz al punto
 
    float  diffuse_reflection = max (dot (N, L), 0.0); 
    float specular_reflection = pow (max (dot (R, C), 0.0), gl_FrontMaterial.shininess * 0.25) < 0.5 ? 0.0 : 1.0; 
 
 
    gl_FragColor = ambient_color + diffuse_reflection * texture2D(sampler2d, gl_TexCoord[0].st) + specular_reflection * gl_FrontMaterial.specular; 
    
} ;